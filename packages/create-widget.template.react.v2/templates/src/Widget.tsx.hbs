import { $Actions, $Objects, $Queries } from "{{osdkPackage}}";
import {
  Box,
  Button,
  Checkbox,
  Container,
  Flex,
  Heading,
  Skeleton,
  Table,
  Text,
  TextField,
} from "@radix-ui/themes";
import React, { useCallback, useState } from "react";
import { useWidgetContext } from "./context.js";

export const Widget: React.FC = () => {
  const { parameters, emitEvent } = useWidgetContext();
  const { headerText, todoItems } = parameters.values;
  const [newTodoItem, setNewTodoItem] = useState("");

  const handleAddTodoItem = useCallback(() => {
    emitEvent("updateTodoItems", {
      parameterUpdates: {
        todoItems: [...(todoItems ?? []), newTodoItem],
      },
    });
    setNewTodoItem("");
  }, [emitEvent, newTodoItem, todoItems]);

  const handleNewTodoItemChange = useCallback(
    (event: React.ChangeEvent<HTMLInputElement>) => {
      setNewTodoItem(event.target.value);
    },
    []
  );

  const objectApiNames = Object.keys($Objects);
  const actionApiNames = Object.keys($Actions);
  const queryApiNames = Object.keys($Queries);

  return (
    <Box>
      <Container size="1">
        <Flex direction="column" gap="4">
          <Flex p="5" direction="column" gap="2">
            <Heading size="4">
              {parameters.state === "loading"
                  || parameters.state === "not-started"
                ? <Skeleton>Hello, world!</Skeleton>
                : headerText ?? "{{project}}"}
            </Heading>

            <Table.Root>
              <Table.Header>
                <Table.Row>
                  <Table.ColumnHeaderCell>Finished</Table.ColumnHeaderCell>
                  <Table.ColumnHeaderCell>Item</Table.ColumnHeaderCell>
                </Table.Row>
              </Table.Header>

              <Table.Body>
                {(parameters.state === "loading"
                  || parameters.state === "not-started") && (
                  <>
                    <Table.Row>
                      <Table.Cell>
                        <Skeleton>
                          <Checkbox />
                        </Skeleton>
                      </Table.Cell>
                      <Table.Cell>
                        <Skeleton>Loading cell</Skeleton>
                      </Table.Cell>
                    </Table.Row>
                    <Table.Row>
                      <Table.Cell>
                        <Skeleton>
                          <Checkbox />
                        </Skeleton>
                      </Table.Cell>
                      <Table.Cell>
                        <Skeleton>Loading cell</Skeleton>
                      </Table.Cell>
                    </Table.Row>
                  </>
                )}
                {parameters.state === "loaded"
                  && todoItems?.map((item, index) => (
                    <Table.Row key={index}>
                      <Table.Cell>
                        <Checkbox />
                      </Table.Cell>
                      <Table.Cell>{item}</Table.Cell>
                    </Table.Row>
                  ))}
                {parameters.state === "loaded"
                  && (todoItems ?? []).length === 0 && (
                  <Table.Row>
                    <Table.Cell colSpan={2}>No items yet</Table.Cell>
                  </Table.Row>
                )}
                <Table.Row>
                  <Table.Cell colSpan={2}>
                    <Flex gap="2">
                      <TextField.Root
                        value={newTodoItem}
                        onChange={handleNewTodoItemChange}
                        size="2"
                        placeholder="Add itemâ€¦"
                      />
                      <Button onClick={handleAddTodoItem}>Add item</Button>
                    </Flex>
                  </Table.Cell>
                </Table.Row>
              </Table.Body>
            </Table.Root>

          </Flex>
          <Box>
            <Flex direction="column" gap="2">
              <Text>
                Try and of the following methods from your Ontology SDK
              </Text>
              <Flex direction="column" gap="1">
                <Heading size="4">Objects ({objectApiNames.length})</Heading>
                <pre>
                  {objectApiNames.map((objectApiName) => (
                    <div key={objectApiName}>client({objectApiName})</div>
                  ))}
                </pre>
              </Flex>
              <Flex direction="column" gap="1">
                <Heading size="4">Actions ({actionApiNames.length})</Heading>
                <pre>
                  {actionApiNames.map((actionApiName) => (
                    <div key={actionApiName}>client({actionApiName})</div>
                  ))}
                </pre>
              </Flex>
              <Flex direction="column" gap="1">
                <Heading size="4">Queries ({queryApiNames.length})</Heading>
                <pre>
                  {queryApiNames.map((queryApiName) => (
                    <div key={queryApiName}>client({queryApiName})</div>
                  ))}
                </pre>
              </Flex>
            </Flex>
          </Box>
        </Flex>
      </Container>
    </Box>
  );
};
