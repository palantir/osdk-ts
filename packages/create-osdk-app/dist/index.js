import n from"fs";import p from"path";import{fileURLToPath as A}from"url";import E from"handlebars";import _ from"yargs";import{hideBin as I}from"yargs/helpers";import{consola as k,createConsola as T}from"consola";var r=T({async prompt(...t){let e=await k.prompt(...t);return typeof e=="symbol"&&e.toString()==="Symbol(clack:cancel)"&&(k.fail("Operation cancelled"),process.exit(0)),e}});import{colorize as x}from"consola/utils";function u(t){return x("green",t)}function c(t){return x("italic",t)}var d=[{id:"template-react",label:"React",envPrefix:"VITE_"},{id:"template-vue",label:"Vue",envPrefix:"VITE_"},{id:"template-next-static-export",label:"Next (static export)",envPrefix:"NEXT_PUBLIC_"}];async function L(t=process.argv){let i=_(I(t)).version(!1).strict().help().command("$0 [project] [--<option>]","Create a new OSDK application based on framework templates. Information may be provided through arguments to skip interactive prompts.",m=>m.positional("project",{type:"string",describe:"Project name to create"}).option("overwrite",{type:"boolean",describe:"Overwrite project directory if already exists"}).option("template",{type:"string",describe:"Template name to use"}).option("foundry-url",{type:"string",describe:"URL for the Foundry stack"}).option("application-url",{type:"string",describe:"URL the production application will be hosted on"}).option("skip-application-url",{type:"boolean",describe:"Skip filling in URL the production application will be hosted on"}).option("client-id",{type:"string",describe:"OAuth client ID for application"}).option("osdk-package",{type:"string",describe:"OSDK package name for application"}).option("osdk-registry-url",{type:"string",describe:"URL for NPM registry to install OSDK package"})).parseSync(),a=await j(i),U=await F(i,a),l=await N(i),f=await K(i),y=await Y(i),g=await M(i),h=await H(i),w=await z(i);r.log(""),r.start(`Creating project ${u(a)} using template ${u(l.id)}`);let v=process.cwd(),o=p.join(v,a);n.existsSync(o)?U?(r.info("Overwriting existing project directory"),n.rmSync(o,{recursive:!0,force:!0}),n.mkdirSync(o,{recursive:!0})):r.info("Reusing existing project directory"):(r.info("Creating project directory"),n.mkdirSync(o,{recursive:!0})),r.info("Copying files into project directory");let P=p.resolve(A(import.meta.url),"../..",l.id);n.cpSync(P,o,{recursive:!0});let b=function(m){n.readdirSync(m).forEach(function(s){if(s=m+"/"+s,n.statSync(s).isDirectory()){b(s);return}if(!s.endsWith(".hbs"))return;let C={project:a,osdkPackage:h},O=E.compile(n.readFileSync(s,"utf-8"))(C);n.writeFileSync(s.replace(/.hbs$/,""),O),n.rmSync(s)})};b(o);let R=`//${w.replace(/^https:\/\//,"")}:_authToken=\${FOUNDRY_SDK_AUTH_TOKEN}
${h.split("/")[0]}:registry=${w}
`;n.writeFileSync(p.join(o,".npmrc"),R);let D=`${l.envPrefix}FOUNDRY_API_URL=${f}
${l.envPrefix}FOUNDRY_REDIRECT_URL=http://localhost:8080/auth/callback
${l.envPrefix}FOUNDRY_CLIENT_ID=${g}
`;n.writeFileSync(p.join(o,".env.development"),D);let S=`${l.envPrefix}FOUNDRY_API_URL=${f}
${l.envPrefix}FOUNDRY_REDIRECT_URL=${y??"<Fill in the domain at which you deploy your application>"}/auth/callback
${l.envPrefix}FOUNDRY_CLIENT_ID=${g}
`;n.writeFileSync(p.join(o,".env.production"),S),r.success("Success");let $=p.relative(v,o);r.box({message:`Done! Run the following commands to get started:

  \`cd ${$}\`
  \`export FOUNDRY_SDK_AUTH_TOKEN=<token>\`
  \`npm install\`
  \`npm run dev\``,style:{padding:2,borderColor:"green",borderStyle:"rounded"}})}async function j(t){let e=t.project;for(;e==null||!/^[a-zA-Z0-9-_]+$/.test(e);)e!=null&&r.fail("Project name can only contain alphanumeric characters, hyphens and underscores"),e=await r.prompt("Project name:",{type:"text",placeholder:"my-osdk-app",default:"my-osdk-app"});return e}async function F(t,e){if(!n.existsSync(p.join(process.cwd(),e)))return!0;if(t.overwrite!=null)return t.overwrite;switch(await r.prompt(`The directory ${u(e)} already exists do you want to overwrite or ignore it?`,{type:"select",options:[{label:"Remove existing files and continue",value:"overwrite"},{label:"Ignore files and continue",value:"ignore"},{label:"Cancel",value:"cancel"}]})){case"overwrite":return!0;case"ignore":return!1;case"cancel":r.fail("Operation cancelled"),process.exit(0)}}async function N(t){let e=d.find(i=>i.id===t.template);if(e==null){let i=await r.prompt(t.template!=null?`The provided template ${u(t.template)} is invalid please select a framework:`:"Select a framework:",{type:"select",options:d.map(a=>({value:a.id,label:a.label}))});if(e=d.find(a=>a.id===i),e==null)throw new Error(`Template ${i} should be found`)}return e}async function K(t){let e=t.foundryUrl;for(;e==null||!e.startsWith("https://");)e!=null&&r.fail("Please enter a valid Foundry URL"),e=await r.prompt(`Enter the URL for your Foundry stack:
${c("(Example https://example.palantirfoundry.com/)")}`,{type:"text"});return e}async function Y(t){if(t.skipApplicationUrl)return;let e=t.applicationUrl;if(!(e==null&&await r.prompt("Do you know the URL your production application will be hosted on? This is required to create a production build of your application with the correct OAuth redirect URL.",{type:"select",options:[{label:"Yes, prefill it for me",value:"yes"},{label:"No, I will fill it in myself later",value:"no"}]})==="no")){for(;e==null||!/^https?:\/\//.test(e);)e!=null&&r.fail("Please enter a valid application URL"),e=await r.prompt(`Enter the URL your production application will be hosted on:
${c("(Example https://myapp.example.palantirfoundry.com/)")}`,{type:"text"});return e}}async function M(t){let e=t.clientId;for(;e==null||!/^[0-9a-f]+$/.test(e);)e!=null&&r.fail("Please enter a valid OAuth client ID"),e=await r.prompt(`Enter the OAuth client ID for your application from Developer Console:
${c("(Example 2650385ab6c5e0df3b44aff776b00a42)")}`,{type:"text"});return e}async function H(t){let e=t.osdkPackage;for(;e==null||!/^@[a-z0-9-]+\/sdk$/.test(e);)e!=null&&r.fail("Please enter a valid OSDK package name"),e=await r.prompt(`Enter the OSDK package name for your application from Developer Console:
${c("(Example @my-app/sdk)")}`,{type:"text"});return e}async function z(t){let e=t.osdkRegistryUrl;for(;e==null||!/^https:\/\/[^/]+\/artifacts\/api\/repositories\/ri\.artifacts\.[^/]+\/contents\/release\/npm\/?$/.test(e);)e!=null&&r.fail("Please enter a valid NPM registry URL to install your OSDK package"),e=await r.prompt(`Enter the NPM registry URL to install your OSDK package from Developer Console:
${c("(Example https://example.palantirfoundry.com/artifacts/api/repositories/ri.artifacts.main.repository.a4a7fe1c-486f-4226-b706-7b90005f527d/contents/release/npm)")}`,{type:"text"});return e}export{L as cli};
