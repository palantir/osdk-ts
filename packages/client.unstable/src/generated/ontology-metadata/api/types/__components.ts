/*
 * Copyright 2025 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import type {
  InterfaceTypeApiName as _api_InterfaceTypeApiName,
  InterfaceTypeRid as _api_InterfaceTypeRid,
  InterfaceTypeRidOrIdInRequest as _api_InterfaceTypeRidOrIdInRequest,
  MediaItemRid as _api_MediaItemRid,
  MediaSetRid as _api_MediaSetRid,
  MediaSetViewRid as _api_MediaSetViewRid,
  ObjectTypeFieldApiName as _api_ObjectTypeFieldApiName,
  ObjectTypeId as _api_ObjectTypeId,
  OntologyIrQualifiedSeriesIdPropertyValue
    as _api_OntologyIrQualifiedSeriesIdPropertyValue,
  PropertyTypeId as _api_PropertyTypeId,
  QualifiedSeriesIdPropertyValue as _api_QualifiedSeriesIdPropertyValue,
  SeriesIdPropertyValue as _api_SeriesIdPropertyValue,
  TemplateRidPropertyValue as _api_TemplateRidPropertyValue,
} from "../__components.js";

/**
 * AttachmentListType specifies that this parameter must be a list of Attachment rids.
 */
export interface AttachmentListType {
}
/**
 * A parameter type that consists of a list of Attachment rids.
 */
export interface AttachmentListValue {
  attachments: Array<string>;
}
/**
 * AttachmentType specifies that this parameter must be the rid of an Attachment.
 */
export interface AttachmentType {
}
/**
 * A parameter type that consists of an Attachment rid.
 */
export interface AttachmentValue {
  attachment: string;
}
/**
 * AutoGenerated is a type used to denote the user has opted for auto-generated PKs. Primary keys will be auto-generated with a random UUID. UUID primary key generation and object creation will be handled within Actions Service.
 */
export interface AutoGenerated {
}
export interface BaseParameterType_boolean {
  type: "boolean";
  boolean: BooleanType;
}

export interface BaseParameterType_booleanList {
  type: "booleanList";
  booleanList: BooleanListType;
}

export interface BaseParameterType_integer {
  type: "integer";
  integer: IntegerType;
}

export interface BaseParameterType_integerList {
  type: "integerList";
  integerList: IntegerListType;
}

export interface BaseParameterType_long {
  type: "long";
  long: LongType;
}

export interface BaseParameterType_longList {
  type: "longList";
  longList: LongListType;
}

export interface BaseParameterType_double {
  type: "double";
  double: DoubleType;
}

export interface BaseParameterType_doubleList {
  type: "doubleList";
  doubleList: DoubleListType;
}

export interface BaseParameterType_string {
  type: "string";
  string: StringType;
}

export interface BaseParameterType_stringList {
  type: "stringList";
  stringList: StringListType;
}

export interface BaseParameterType_decimal {
  type: "decimal";
  decimal: DecimalType;
}

export interface BaseParameterType_decimalList {
  type: "decimalList";
  decimalList: DecimalListType;
}

export interface BaseParameterType_geohash {
  type: "geohash";
  geohash: GeohashType;
}

export interface BaseParameterType_geohashList {
  type: "geohashList";
  geohashList: GeohashListType;
}

export interface BaseParameterType_geoshape {
  type: "geoshape";
  geoshape: GeoshapeType;
}

export interface BaseParameterType_geoshapeList {
  type: "geoshapeList";
  geoshapeList: GeoshapeListType;
}

export interface BaseParameterType_timeSeriesReference {
  type: "timeSeriesReference";
  timeSeriesReference: TimeSeriesReferenceType;
}

export interface BaseParameterType_timestamp {
  type: "timestamp";
  timestamp: TimestampType;
}

export interface BaseParameterType_timestampList {
  type: "timestampList";
  timestampList: TimestampListType;
}

export interface BaseParameterType_date {
  type: "date";
  date: DateType;
}

export interface BaseParameterType_dateList {
  type: "dateList";
  dateList: DateListType;
}

export interface BaseParameterType_objectReference {
  type: "objectReference";
  objectReference: ObjectReferenceType;
}

export interface BaseParameterType_objectReferenceList {
  type: "objectReferenceList";
  objectReferenceList: ObjectReferenceListType;
}

export interface BaseParameterType_objectSetRid {
  type: "objectSetRid";
  objectSetRid: ObjectSetRidType;
}

export interface BaseParameterType_interfaceReference {
  type: "interfaceReference";
  interfaceReference: InterfaceReferenceType;
}

export interface BaseParameterType_interfaceReferenceList {
  type: "interfaceReferenceList";
  interfaceReferenceList: InterfaceReferenceListType;
}

export interface BaseParameterType_objectTypeReference {
  type: "objectTypeReference";
  objectTypeReference: ObjectTypeReferenceType;
}

export interface BaseParameterType_attachment {
  type: "attachment";
  attachment: AttachmentType;
}

export interface BaseParameterType_attachmentList {
  type: "attachmentList";
  attachmentList: AttachmentListType;
}

export interface BaseParameterType_marking {
  type: "marking";
  marking: MarkingType;
}

export interface BaseParameterType_markingList {
  type: "markingList";
  markingList: MarkingListType;
}

export interface BaseParameterType_mediaReference {
  type: "mediaReference";
  mediaReference: MediaReferenceType;
}

export interface BaseParameterType_mediaReferenceList {
  type: "mediaReferenceList";
  mediaReferenceList: MediaReferenceListType;
}

export interface BaseParameterType_geotimeSeriesReference {
  type: "geotimeSeriesReference";
  geotimeSeriesReference: GeotimeSeriesReferenceType;
}

export interface BaseParameterType_geotimeSeriesReferenceList {
  type: "geotimeSeriesReferenceList";
  geotimeSeriesReferenceList: GeotimeSeriesReferenceListType;
}

export interface BaseParameterType_struct {
  type: "struct";
  struct: StructType;
}

export interface BaseParameterType_structList {
  type: "structList";
  structList: StructListType;
}
/**
 * All of the possible types for Parameters.
 */
export type BaseParameterType =
  | BaseParameterType_boolean
  | BaseParameterType_booleanList
  | BaseParameterType_integer
  | BaseParameterType_integerList
  | BaseParameterType_long
  | BaseParameterType_longList
  | BaseParameterType_double
  | BaseParameterType_doubleList
  | BaseParameterType_string
  | BaseParameterType_stringList
  | BaseParameterType_decimal
  | BaseParameterType_decimalList
  | BaseParameterType_geohash
  | BaseParameterType_geohashList
  | BaseParameterType_geoshape
  | BaseParameterType_geoshapeList
  | BaseParameterType_timeSeriesReference
  | BaseParameterType_timestamp
  | BaseParameterType_timestampList
  | BaseParameterType_date
  | BaseParameterType_dateList
  | BaseParameterType_objectReference
  | BaseParameterType_objectReferenceList
  | BaseParameterType_objectSetRid
  | BaseParameterType_interfaceReference
  | BaseParameterType_interfaceReferenceList
  | BaseParameterType_objectTypeReference
  | BaseParameterType_attachment
  | BaseParameterType_attachmentList
  | BaseParameterType_marking
  | BaseParameterType_markingList
  | BaseParameterType_mediaReference
  | BaseParameterType_mediaReferenceList
  | BaseParameterType_geotimeSeriesReference
  | BaseParameterType_geotimeSeriesReferenceList
  | BaseParameterType_struct
  | BaseParameterType_structList;

export interface BaseParameterTypeModification_boolean {
  type: "boolean";
  boolean: BooleanType;
}

export interface BaseParameterTypeModification_booleanList {
  type: "booleanList";
  booleanList: BooleanListType;
}

export interface BaseParameterTypeModification_integer {
  type: "integer";
  integer: IntegerType;
}

export interface BaseParameterTypeModification_integerList {
  type: "integerList";
  integerList: IntegerListType;
}

export interface BaseParameterTypeModification_long {
  type: "long";
  long: LongType;
}

export interface BaseParameterTypeModification_longList {
  type: "longList";
  longList: LongListType;
}

export interface BaseParameterTypeModification_double {
  type: "double";
  double: DoubleType;
}

export interface BaseParameterTypeModification_doubleList {
  type: "doubleList";
  doubleList: DoubleListType;
}

export interface BaseParameterTypeModification_string {
  type: "string";
  string: StringType;
}

export interface BaseParameterTypeModification_stringList {
  type: "stringList";
  stringList: StringListType;
}

export interface BaseParameterTypeModification_decimal {
  type: "decimal";
  decimal: DecimalType;
}

export interface BaseParameterTypeModification_decimalList {
  type: "decimalList";
  decimalList: DecimalListType;
}

export interface BaseParameterTypeModification_geohash {
  type: "geohash";
  geohash: GeohashType;
}

export interface BaseParameterTypeModification_geohashList {
  type: "geohashList";
  geohashList: GeohashListType;
}

export interface BaseParameterTypeModification_geoshape {
  type: "geoshape";
  geoshape: GeoshapeType;
}

export interface BaseParameterTypeModification_geoshapeList {
  type: "geoshapeList";
  geoshapeList: GeoshapeListType;
}

export interface BaseParameterTypeModification_timeSeriesReference {
  type: "timeSeriesReference";
  timeSeriesReference: TimeSeriesReferenceType;
}

export interface BaseParameterTypeModification_timestamp {
  type: "timestamp";
  timestamp: TimestampType;
}

export interface BaseParameterTypeModification_timestampList {
  type: "timestampList";
  timestampList: TimestampListType;
}

export interface BaseParameterTypeModification_date {
  type: "date";
  date: DateType;
}

export interface BaseParameterTypeModification_dateList {
  type: "dateList";
  dateList: DateListType;
}

export interface BaseParameterTypeModification_objectReference {
  type: "objectReference";
  objectReference: ObjectReferenceType;
}

export interface BaseParameterTypeModification_objectReferenceList {
  type: "objectReferenceList";
  objectReferenceList: ObjectReferenceListType;
}

export interface BaseParameterTypeModification_objectSetRid {
  type: "objectSetRid";
  objectSetRid: ObjectSetRidType;
}

export interface BaseParameterTypeModification_interfaceReference {
  type: "interfaceReference";
  interfaceReference: InterfaceReferenceTypeModification;
}

export interface BaseParameterTypeModification_interfaceReferenceList {
  type: "interfaceReferenceList";
  interfaceReferenceList: InterfaceReferenceListTypeModification;
}

export interface BaseParameterTypeModification_objectTypeReference {
  type: "objectTypeReference";
  objectTypeReference: ObjectTypeReferenceType;
}

export interface BaseParameterTypeModification_attachment {
  type: "attachment";
  attachment: AttachmentType;
}

export interface BaseParameterTypeModification_attachmentList {
  type: "attachmentList";
  attachmentList: AttachmentListType;
}

export interface BaseParameterTypeModification_marking {
  type: "marking";
  marking: MarkingType;
}

export interface BaseParameterTypeModification_markingList {
  type: "markingList";
  markingList: MarkingListType;
}

export interface BaseParameterTypeModification_mediaReference {
  type: "mediaReference";
  mediaReference: MediaReferenceType;
}

export interface BaseParameterTypeModification_mediaReferenceList {
  type: "mediaReferenceList";
  mediaReferenceList: MediaReferenceListType;
}

export interface BaseParameterTypeModification_geotimeSeriesReference {
  type: "geotimeSeriesReference";
  geotimeSeriesReference: GeotimeSeriesReferenceType;
}

export interface BaseParameterTypeModification_geotimeSeriesReferenceList {
  type: "geotimeSeriesReferenceList";
  geotimeSeriesReferenceList: GeotimeSeriesReferenceListType;
}

export interface BaseParameterTypeModification_struct {
  type: "struct";
  struct: StructType;
}

export interface BaseParameterTypeModification_structList {
  type: "structList";
  structList: StructListType;
}
/**
 * All of the possible types for Parameters.
 */
export type BaseParameterTypeModification =
  | BaseParameterTypeModification_boolean
  | BaseParameterTypeModification_booleanList
  | BaseParameterTypeModification_integer
  | BaseParameterTypeModification_integerList
  | BaseParameterTypeModification_long
  | BaseParameterTypeModification_longList
  | BaseParameterTypeModification_double
  | BaseParameterTypeModification_doubleList
  | BaseParameterTypeModification_string
  | BaseParameterTypeModification_stringList
  | BaseParameterTypeModification_decimal
  | BaseParameterTypeModification_decimalList
  | BaseParameterTypeModification_geohash
  | BaseParameterTypeModification_geohashList
  | BaseParameterTypeModification_geoshape
  | BaseParameterTypeModification_geoshapeList
  | BaseParameterTypeModification_timeSeriesReference
  | BaseParameterTypeModification_timestamp
  | BaseParameterTypeModification_timestampList
  | BaseParameterTypeModification_date
  | BaseParameterTypeModification_dateList
  | BaseParameterTypeModification_objectReference
  | BaseParameterTypeModification_objectReferenceList
  | BaseParameterTypeModification_objectSetRid
  | BaseParameterTypeModification_interfaceReference
  | BaseParameterTypeModification_interfaceReferenceList
  | BaseParameterTypeModification_objectTypeReference
  | BaseParameterTypeModification_attachment
  | BaseParameterTypeModification_attachmentList
  | BaseParameterTypeModification_marking
  | BaseParameterTypeModification_markingList
  | BaseParameterTypeModification_mediaReference
  | BaseParameterTypeModification_mediaReferenceList
  | BaseParameterTypeModification_geotimeSeriesReference
  | BaseParameterTypeModification_geotimeSeriesReferenceList
  | BaseParameterTypeModification_struct
  | BaseParameterTypeModification_structList;

/**
 * BooleanListType specifies that this parameter must be a list of Booleans.
 */
export interface BooleanListType {
}
/**
 * A parameter value type that consists of a list of Booleans.
 */
export interface BooleanListValue {
  booleans: Array<boolean>;
}
/**
 * BooleanType specifies that this parameter must be a Boolean.
 */
export interface BooleanType {
}
/**
 * A parameter value type that is a Boolean.
 */
export type BooleanValue = boolean;
export interface CbacMarkingPicker {
}
export interface Checkbox {
  layout?: MultipleChoiceItemLayoutOptions | null | undefined;
}
/**
 * An id for ConditionValues stored in ObjectSetFilters
 */
export type ConditionValueId = string;
export interface CreateObjectOption_autoGenerated {
  type: "autoGenerated";
  autoGenerated: AutoGenerated;
}

export interface CreateObjectOption_userInput {
  type: "userInput";
  userInput: UserInput;
}
export type CreateObjectOption =
  | CreateObjectOption_autoGenerated
  | CreateObjectOption_userInput;

export interface DataValue_boolean {
  type: "boolean";
  boolean: BooleanValue;
}

export interface DataValue_booleanList {
  type: "booleanList";
  booleanList: BooleanListValue;
}

export interface DataValue_integer {
  type: "integer";
  integer: IntegerValue;
}

export interface DataValue_integerList {
  type: "integerList";
  integerList: IntegerListValue;
}

export interface DataValue_long {
  type: "long";
  long: LongValue;
}

export interface DataValue_longList {
  type: "longList";
  longList: LongListValue;
}

export interface DataValue_double {
  type: "double";
  double: DoubleValue;
}

export interface DataValue_doubleList {
  type: "doubleList";
  doubleList: DoubleListValue;
}

export interface DataValue_string {
  type: "string";
  string: StringValue;
}

export interface DataValue_stringList {
  type: "stringList";
  stringList: StringListValue;
}

export interface DataValue_decimal {
  type: "decimal";
  decimal: DecimalValue;
}

export interface DataValue_decimalList {
  type: "decimalList";
  decimalList: DecimalListValue;
}

export interface DataValue_date {
  type: "date";
  date: DateValue;
}

export interface DataValue_dateList {
  type: "dateList";
  dateList: DateListValue;
}

export interface DataValue_geohash {
  type: "geohash";
  geohash: GeohashValue;
}

export interface DataValue_geohashList {
  type: "geohashList";
  geohashList: GeohashListValue;
}

export interface DataValue_geoshape {
  type: "geoshape";
  geoshape: GeoshapeValue;
}

export interface DataValue_geoshapeList {
  type: "geoshapeList";
  geoshapeList: GeoshapeListValue;
}

export interface DataValue_timeSeriesReference {
  type: "timeSeriesReference";
  timeSeriesReference: TimeSeriesReferenceValue;
}

export interface DataValue_timestamp {
  type: "timestamp";
  timestamp: TimestampValue;
}

export interface DataValue_timestampList {
  type: "timestampList";
  timestampList: TimestampListValue;
}

export interface DataValue_null {
  type: "null";
  null: NullValue;
}

export interface DataValue_objectLocator {
  type: "objectLocator";
  objectLocator: ObjectLocatorValue;
}

export interface DataValue_objectLocatorList {
  type: "objectLocatorList";
  objectLocatorList: ObjectLocatorListValue;
}

export interface DataValue_objectType {
  type: "objectType";
  objectType: ObjectTypeValue;
}

export interface DataValue_attachment {
  type: "attachment";
  attachment: AttachmentValue;
}

export interface DataValue_attachmentList {
  type: "attachmentList";
  attachmentList: AttachmentListValue;
}

export interface DataValue_marking {
  type: "marking";
  marking: MarkingValue;
}

export interface DataValue_markingList {
  type: "markingList";
  markingList: MarkingListValue;
}

export interface DataValue_mediaReference {
  type: "mediaReference";
  mediaReference: MediaReferenceValue;
}

export interface DataValue_mediaReferenceList {
  type: "mediaReferenceList";
  mediaReferenceList: MediaReferenceListValue;
}

export interface DataValue_geotimeSeriesReference {
  type: "geotimeSeriesReference";
  geotimeSeriesReference: GeotimeSeriesReferenceValue;
}

export interface DataValue_geotimeSeriesReferenceList {
  type: "geotimeSeriesReferenceList";
  geotimeSeriesReferenceList: GeotimeSeriesReferenceListValue;
}

export interface DataValue_struct {
  type: "struct";
  struct: StructValue;
}

export interface DataValue_structList {
  type: "structList";
  structList: StructListValue;
}
export type DataValue =
  | DataValue_boolean
  | DataValue_booleanList
  | DataValue_integer
  | DataValue_integerList
  | DataValue_long
  | DataValue_longList
  | DataValue_double
  | DataValue_doubleList
  | DataValue_string
  | DataValue_stringList
  | DataValue_decimal
  | DataValue_decimalList
  | DataValue_date
  | DataValue_dateList
  | DataValue_geohash
  | DataValue_geohashList
  | DataValue_geoshape
  | DataValue_geoshapeList
  | DataValue_timeSeriesReference
  | DataValue_timestamp
  | DataValue_timestampList
  | DataValue_null
  | DataValue_objectLocator
  | DataValue_objectLocatorList
  | DataValue_objectType
  | DataValue_attachment
  | DataValue_attachmentList
  | DataValue_marking
  | DataValue_markingList
  | DataValue_mediaReference
  | DataValue_mediaReferenceList
  | DataValue_geotimeSeriesReference
  | DataValue_geotimeSeriesReferenceList
  | DataValue_struct
  | DataValue_structList;

/**
 * DateListType specifies that this parameter must be a list of Dates.
 */
export interface DateListType {
}
/**
 * A parameter value type that consists of a list of strings representing dates.
 */
export interface DateListValue {
  dates: Array<string>;
}
export interface DateTimePicker {
}
/**
 * DateType specifies that this parameter must be a Date.
 */
export interface DateType {
}
/**
 * A parameter value type that is a String representation of a date.
 */
export interface DateValue {
  dateValue: string;
}
/**
 * DecimalListType specifies that this parameter must be a list of Decimals.
 */
export interface DecimalListType {
  precision?: number | null | undefined;
  scale?: number | null | undefined;
}
/**
 * A parameter value type that is a list of Decimals. Each value can be returned in a scientific notation with
 * the exponent preceded by a letter 'E' followed by a '+'/'-' sign (for example 4.321E+8 or 0.332E-5).
 */
export interface DecimalListValue {
  decimals: Array<string>;
}
/**
 * DecimalType specifies that this parameter must be a Decimal.
 */
export interface DecimalType {
  precision?: number | null | undefined;
  scale?: number | null | undefined;
}
/**
 * A parameter value type that is a Decimal. This value can be returned in a scientific notation with the
 * exponent preceded by a letter 'E' followed by a '+'/'-' sign (for example 4.321E+8 or 0.332E-5).
 */
export interface DecimalValue {
  decimalValue: string;
}
export interface DefaultTimezone_localTimezone {
  type: "localTimezone";
  localTimezone: LocalTimezone;
}

export interface DefaultTimezone_setTimezone {
  type: "setTimezone";
  setTimezone: SpecifiedTimezone;
}
export type DefaultTimezone =
  | DefaultTimezone_localTimezone
  | DefaultTimezone_setTimezone;

/**
 * DoubleListType specifies that this parameter must be a list of Doubles.
 */
export interface DoubleListType {
}
/**
 * A parameter value type that consists of a lists of Doubles.
 */
export interface DoubleListValue {
  doubles: Array<number | "NaN" | "Infinity" | "-Infinity">;
}
/**
 * DoubleType specifies that this parameter must be a Double.
 */
export interface DoubleType {
}
/**
 * A parameter value type that is a Double.
 */
export type DoubleValue = number | "NaN" | "Infinity" | "-Infinity";
export interface Dropdown {
}
export interface FilePicker {
}
/**
 * GeohashListType specifies that this parameter must be a list of Geohashes.
 */
export interface GeohashListType {
}
/**
 * A parameter value type that consists of a list of Geohashes. Only WGS-84 coordinates are supported.
 */
export interface GeohashListValue {
  geohashes: Array<string>;
}
/**
 * GeohashType specifies that this parameter must be a Geohash.
 */
export interface GeohashType {
}
/**
 * A parameter value type that is a Geohash. Only WGS-84 coordinates are supported.
 */
export interface GeohashValue {
  geohash: string;
}
/**
 * This value is guaranteed to be a valid GeoJSON.
 */
export type Geoshape = any;

/**
 * GeoshapeListType specifies that this parameter must be a list of Geoshapes.
 */
export interface GeoshapeListType {
}
/**
 * A parameter value type that consists of a list of Geoshapes.
 */
export interface GeoshapeListValue {
  geoshapes: Array<Geoshape>;
}
/**
 * GeoshapeType specifies that this parameter must be a Geoshape.
 */
export interface GeoshapeType {
}
/**
 * A parameter value type that is a Geoshape.
 */
export interface GeoshapeValue {
  geoshape: Geoshape;
}
/**
 * GeotimeSeriesReferenceListType specifies that this parameter must be a list of GeotimeSeriesReferences.
 * valid allowedParameterValues: ParameterGeotimeSeriesReferenceOrEmpty
 * valid prefill DataValues: None
 */
export interface GeotimeSeriesReferenceListType {
}
/**
 * A parameter type that consists of a list of GeotimeSeriesReferences.
 */
export interface GeotimeSeriesReferenceListValue {
  geotimeSeriesReferences: Array<GeotimeSeriesReferenceValue>;
}
/**
 * GeotimeSeriesReferenceType specifies that this parameter must be a GeotimeSeriesReference.
 * valid allowedParameterValues: ParameterGeotimeSeriesReferenceOrEmpty
 * valid prefill DataValues: None
 */
export interface GeotimeSeriesReferenceType {
}
/**
 * A parameter type that consists of a GeotimeSeriesReference.
 */
export interface GeotimeSeriesReferenceValue {
  integrationRid: string;
  seriesId: string;
}
/**
 * IntegerListType specifies that this parameter must be a list of Integers.
 */
export interface IntegerListType {
}
/**
 * A parameter value type that consists of a lists of Integers.
 */
export interface IntegerListValue {
  integers: Array<number>;
}
/**
 * IntegerType specifies that this parameter must be an Integer.
 */
export interface IntegerType {
}
/**
 * A parameter value type that is an Integer.
 */
export type IntegerValue = number;

/**
 * Visual intent color to apply to element.
 */
export type Intent = "PRIMARY" | "SUCCESS" | "WARNING" | "DANGER";
export interface InterfaceReferenceListType {
  interfaceTypeRid: _api_InterfaceTypeRid;
}
export interface InterfaceReferenceListTypeModification {
  interfaceTypeRidOrIdInRequest: _api_InterfaceTypeRidOrIdInRequest;
}
export interface InterfaceReferenceType {
  interfaceTypeRid: _api_InterfaceTypeRid;
}
export interface InterfaceReferenceTypeModification {
  interfaceTypeRidOrIdInRequest: _api_InterfaceTypeRidOrIdInRequest;
}
/**
 * Optionally specifies the min and max parameter list lengths permitted for a parameter. This type is only
 * usable with list type parameters.
 */
export interface ListLengthValidation {
  maxLength?: number | null | undefined;
  minLength?: number | null | undefined;
}
/**
 * Object representing that the timezone should always be displayed to the user relative to their system timezone
 */
export interface LocalTimezone {
}
/**
 * LongListType specifies that this parameter must be a list of Longs.
 */
export interface LongListType {
}
/**
 * A parameter value type that consists of a lists of Longs.
 */
export interface LongListValue {
  longs: Array<number>;
}
/**
 * LongType specifies that this parameter must be a Long.
 */
export interface LongType {
}
/**
 * A parameter value type that is a Long.
 */
export type LongValue = number;
export interface MandatoryMarkingPicker {
}
/**
 * MarkingListType specifies that this parameter must be a list of Markings.
 */
export interface MarkingListType {
}
/**
 * A parameter type that consists of a list of Marking values.
 */
export interface MarkingListValue {
  markings: Array<string>;
}
/**
 * MarkingType specifies that this parameter must be a CBAC or Madatory Marking type.
 */
export interface MarkingType {
}
/**
 * A parameter type that consists of Marking Values.
 */
export interface MarkingValue {
  marking: string;
}
export interface MediaReference_mediaSetViewItem {
  type: "mediaSetViewItem";
  mediaSetViewItem: MediaViewItemReference;
}
export type MediaReference = MediaReference_mediaSetViewItem;

/**
 * MediaReferenceListType specifies that this parameter must be a list of MediaReferences.
 */
export interface MediaReferenceListType {
}
/**
 * A parameter type that consists of a list of MediaReferences.
 */
export interface MediaReferenceListValue {
  mediaReferences: Array<MediaReferenceValue>;
}
/**
 * MediaReferenceType specifies that this parameter must be a MediaReference.
 */
export interface MediaReferenceType {
}
/**
 * A parameter type that consists of a MediaReference.
 */
export interface MediaReferenceValue {
  mediaReference: MediaReference;
  mimeType: MimeType;
}
export interface MediaViewItemReference {
  mediaItemRid: _api_MediaItemRid;
  mediaSetRid: _api_MediaSetRid;
  mediaSetViewRid: _api_MediaSetViewRid;
}
/**
 * Expected to match mime format from  https://www.iana.org/assignments/media-types/media-types.xhtml
 */
export type MimeType = string;
export type MultipleChoiceItemLayoutOptions = "STACKED" | "INLINE";
export interface NowValue {
}
/**
 * A parameter value type representing null.
 */
export interface NullValue {
}
export interface NumericInput {
}
export interface ObjectLocator {
  objectTypeId: _api_ObjectTypeId;
  primaryKey: ObjectPrimaryKey;
}
/**
 * A parameter value type that consists of a list of ObjectLocators.
 */
export interface ObjectLocatorListValue {
  objectLocatorList: Array<ObjectLocator>;
}
/**
 * A parameter value type that is an ObjectLocator.
 */
export type ObjectLocatorValue = ObjectLocator;
export type ObjectPrimaryKey = Record<_api_PropertyTypeId, PrimaryKeyValue>;

/**
 * ObjectReferenceListType specifies that this parameter must be a list of ObjectLocators.
 */
export interface ObjectReferenceListType {
  objectTypeId: _api_ObjectTypeId;
}
/**
 * ObjectReferenceType specifies that this parameter must be an ObjectLocator. An additional optional field maybeCreateObjectOption is included for handling upsert action types by providing flexibility of object creation from a user-specified PK or auto-generated UID PK.
 */
export interface ObjectReferenceType {
  maybeCreateObjectOption?: CreateObjectOption | null | undefined;
  objectTypeId: _api_ObjectTypeId;
}
/**
 * ObjectSetRidType specifies that this parameter must be an ObjectSetRid.
 */
export interface ObjectSetRidType {
  objectTypeId: _api_ObjectTypeId;
}
/**
 * An ObjectTypeReferenceType can be used to supply an object type to a function. This is useful for
 * addInterfaceRule where you need to specify what type of object you're creating.
 * NOTE: this is NOT an object instance.
 */
export interface ObjectTypeReferenceType {
}
/**
 * A parameter value that references a specific object type.
 */
export interface ObjectTypeValue {
  objectTypeId: _api_ObjectTypeId;
}
export interface OntologyIrBaseParameterType_boolean {
  type: "boolean";
  boolean: BooleanType;
}

export interface OntologyIrBaseParameterType_booleanList {
  type: "booleanList";
  booleanList: BooleanListType;
}

export interface OntologyIrBaseParameterType_integer {
  type: "integer";
  integer: IntegerType;
}

export interface OntologyIrBaseParameterType_integerList {
  type: "integerList";
  integerList: IntegerListType;
}

export interface OntologyIrBaseParameterType_long {
  type: "long";
  long: LongType;
}

export interface OntologyIrBaseParameterType_longList {
  type: "longList";
  longList: LongListType;
}

export interface OntologyIrBaseParameterType_double {
  type: "double";
  double: DoubleType;
}

export interface OntologyIrBaseParameterType_doubleList {
  type: "doubleList";
  doubleList: DoubleListType;
}

export interface OntologyIrBaseParameterType_string {
  type: "string";
  string: StringType;
}

export interface OntologyIrBaseParameterType_stringList {
  type: "stringList";
  stringList: StringListType;
}

export interface OntologyIrBaseParameterType_decimal {
  type: "decimal";
  decimal: DecimalType;
}

export interface OntologyIrBaseParameterType_decimalList {
  type: "decimalList";
  decimalList: DecimalListType;
}

export interface OntologyIrBaseParameterType_geohash {
  type: "geohash";
  geohash: GeohashType;
}

export interface OntologyIrBaseParameterType_geohashList {
  type: "geohashList";
  geohashList: GeohashListType;
}

export interface OntologyIrBaseParameterType_geoshape {
  type: "geoshape";
  geoshape: GeoshapeType;
}

export interface OntologyIrBaseParameterType_geoshapeList {
  type: "geoshapeList";
  geoshapeList: GeoshapeListType;
}

export interface OntologyIrBaseParameterType_timeSeriesReference {
  type: "timeSeriesReference";
  timeSeriesReference: TimeSeriesReferenceType;
}

export interface OntologyIrBaseParameterType_timestamp {
  type: "timestamp";
  timestamp: TimestampType;
}

export interface OntologyIrBaseParameterType_timestampList {
  type: "timestampList";
  timestampList: TimestampListType;
}

export interface OntologyIrBaseParameterType_date {
  type: "date";
  date: DateType;
}

export interface OntologyIrBaseParameterType_dateList {
  type: "dateList";
  dateList: DateListType;
}

export interface OntologyIrBaseParameterType_objectReference {
  type: "objectReference";
  objectReference: ObjectReferenceType;
}

export interface OntologyIrBaseParameterType_objectReferenceList {
  type: "objectReferenceList";
  objectReferenceList: ObjectReferenceListType;
}

export interface OntologyIrBaseParameterType_objectSetRid {
  type: "objectSetRid";
  objectSetRid: ObjectSetRidType;
}

export interface OntologyIrBaseParameterType_interfaceReference {
  type: "interfaceReference";
  interfaceReference: OntologyIrInterfaceReferenceType;
}

export interface OntologyIrBaseParameterType_interfaceReferenceList {
  type: "interfaceReferenceList";
  interfaceReferenceList: OntologyIrInterfaceReferenceListType;
}

export interface OntologyIrBaseParameterType_objectTypeReference {
  type: "objectTypeReference";
  objectTypeReference: ObjectTypeReferenceType;
}

export interface OntologyIrBaseParameterType_attachment {
  type: "attachment";
  attachment: AttachmentType;
}

export interface OntologyIrBaseParameterType_attachmentList {
  type: "attachmentList";
  attachmentList: AttachmentListType;
}

export interface OntologyIrBaseParameterType_marking {
  type: "marking";
  marking: MarkingType;
}

export interface OntologyIrBaseParameterType_markingList {
  type: "markingList";
  markingList: MarkingListType;
}

export interface OntologyIrBaseParameterType_mediaReference {
  type: "mediaReference";
  mediaReference: MediaReferenceType;
}

export interface OntologyIrBaseParameterType_mediaReferenceList {
  type: "mediaReferenceList";
  mediaReferenceList: MediaReferenceListType;
}

export interface OntologyIrBaseParameterType_geotimeSeriesReference {
  type: "geotimeSeriesReference";
  geotimeSeriesReference: GeotimeSeriesReferenceType;
}

export interface OntologyIrBaseParameterType_geotimeSeriesReferenceList {
  type: "geotimeSeriesReferenceList";
  geotimeSeriesReferenceList: GeotimeSeriesReferenceListType;
}

export interface OntologyIrBaseParameterType_struct {
  type: "struct";
  struct: StructType;
}

export interface OntologyIrBaseParameterType_structList {
  type: "structList";
  structList: StructListType;
}
/**
 * All of the possible types for Parameters.
 */
export type OntologyIrBaseParameterType =
  | OntologyIrBaseParameterType_boolean
  | OntologyIrBaseParameterType_booleanList
  | OntologyIrBaseParameterType_integer
  | OntologyIrBaseParameterType_integerList
  | OntologyIrBaseParameterType_long
  | OntologyIrBaseParameterType_longList
  | OntologyIrBaseParameterType_double
  | OntologyIrBaseParameterType_doubleList
  | OntologyIrBaseParameterType_string
  | OntologyIrBaseParameterType_stringList
  | OntologyIrBaseParameterType_decimal
  | OntologyIrBaseParameterType_decimalList
  | OntologyIrBaseParameterType_geohash
  | OntologyIrBaseParameterType_geohashList
  | OntologyIrBaseParameterType_geoshape
  | OntologyIrBaseParameterType_geoshapeList
  | OntologyIrBaseParameterType_timeSeriesReference
  | OntologyIrBaseParameterType_timestamp
  | OntologyIrBaseParameterType_timestampList
  | OntologyIrBaseParameterType_date
  | OntologyIrBaseParameterType_dateList
  | OntologyIrBaseParameterType_objectReference
  | OntologyIrBaseParameterType_objectReferenceList
  | OntologyIrBaseParameterType_objectSetRid
  | OntologyIrBaseParameterType_interfaceReference
  | OntologyIrBaseParameterType_interfaceReferenceList
  | OntologyIrBaseParameterType_objectTypeReference
  | OntologyIrBaseParameterType_attachment
  | OntologyIrBaseParameterType_attachmentList
  | OntologyIrBaseParameterType_marking
  | OntologyIrBaseParameterType_markingList
  | OntologyIrBaseParameterType_mediaReference
  | OntologyIrBaseParameterType_mediaReferenceList
  | OntologyIrBaseParameterType_geotimeSeriesReference
  | OntologyIrBaseParameterType_geotimeSeriesReferenceList
  | OntologyIrBaseParameterType_struct
  | OntologyIrBaseParameterType_structList;

export interface OntologyIrDataValue_boolean {
  type: "boolean";
  boolean: BooleanValue;
}

export interface OntologyIrDataValue_booleanList {
  type: "booleanList";
  booleanList: BooleanListValue;
}

export interface OntologyIrDataValue_integer {
  type: "integer";
  integer: IntegerValue;
}

export interface OntologyIrDataValue_integerList {
  type: "integerList";
  integerList: IntegerListValue;
}

export interface OntologyIrDataValue_long {
  type: "long";
  long: LongValue;
}

export interface OntologyIrDataValue_longList {
  type: "longList";
  longList: LongListValue;
}

export interface OntologyIrDataValue_double {
  type: "double";
  double: DoubleValue;
}

export interface OntologyIrDataValue_doubleList {
  type: "doubleList";
  doubleList: DoubleListValue;
}

export interface OntologyIrDataValue_string {
  type: "string";
  string: StringValue;
}

export interface OntologyIrDataValue_stringList {
  type: "stringList";
  stringList: StringListValue;
}

export interface OntologyIrDataValue_decimal {
  type: "decimal";
  decimal: DecimalValue;
}

export interface OntologyIrDataValue_decimalList {
  type: "decimalList";
  decimalList: DecimalListValue;
}

export interface OntologyIrDataValue_date {
  type: "date";
  date: DateValue;
}

export interface OntologyIrDataValue_dateList {
  type: "dateList";
  dateList: DateListValue;
}

export interface OntologyIrDataValue_geohash {
  type: "geohash";
  geohash: GeohashValue;
}

export interface OntologyIrDataValue_geohashList {
  type: "geohashList";
  geohashList: GeohashListValue;
}

export interface OntologyIrDataValue_geoshape {
  type: "geoshape";
  geoshape: GeoshapeValue;
}

export interface OntologyIrDataValue_geoshapeList {
  type: "geoshapeList";
  geoshapeList: GeoshapeListValue;
}

export interface OntologyIrDataValue_timeSeriesReference {
  type: "timeSeriesReference";
  timeSeriesReference: OntologyIrTimeSeriesReferenceValue;
}

export interface OntologyIrDataValue_timestamp {
  type: "timestamp";
  timestamp: TimestampValue;
}

export interface OntologyIrDataValue_timestampList {
  type: "timestampList";
  timestampList: TimestampListValue;
}

export interface OntologyIrDataValue_null {
  type: "null";
  null: NullValue;
}

export interface OntologyIrDataValue_objectLocator {
  type: "objectLocator";
  objectLocator: OntologyIrObjectLocatorValue;
}

export interface OntologyIrDataValue_objectLocatorList {
  type: "objectLocatorList";
  objectLocatorList: OntologyIrObjectLocatorListValue;
}

export interface OntologyIrDataValue_objectType {
  type: "objectType";
  objectType: ObjectTypeValue;
}

export interface OntologyIrDataValue_attachment {
  type: "attachment";
  attachment: AttachmentValue;
}

export interface OntologyIrDataValue_attachmentList {
  type: "attachmentList";
  attachmentList: AttachmentListValue;
}

export interface OntologyIrDataValue_marking {
  type: "marking";
  marking: MarkingValue;
}

export interface OntologyIrDataValue_markingList {
  type: "markingList";
  markingList: MarkingListValue;
}

export interface OntologyIrDataValue_mediaReference {
  type: "mediaReference";
  mediaReference: MediaReferenceValue;
}

export interface OntologyIrDataValue_mediaReferenceList {
  type: "mediaReferenceList";
  mediaReferenceList: MediaReferenceListValue;
}

export interface OntologyIrDataValue_geotimeSeriesReference {
  type: "geotimeSeriesReference";
  geotimeSeriesReference: GeotimeSeriesReferenceValue;
}

export interface OntologyIrDataValue_geotimeSeriesReferenceList {
  type: "geotimeSeriesReferenceList";
  geotimeSeriesReferenceList: GeotimeSeriesReferenceListValue;
}

export interface OntologyIrDataValue_struct {
  type: "struct";
  struct: StructValue;
}

export interface OntologyIrDataValue_structList {
  type: "structList";
  structList: StructListValue;
}
export type OntologyIrDataValue =
  | OntologyIrDataValue_boolean
  | OntologyIrDataValue_booleanList
  | OntologyIrDataValue_integer
  | OntologyIrDataValue_integerList
  | OntologyIrDataValue_long
  | OntologyIrDataValue_longList
  | OntologyIrDataValue_double
  | OntologyIrDataValue_doubleList
  | OntologyIrDataValue_string
  | OntologyIrDataValue_stringList
  | OntologyIrDataValue_decimal
  | OntologyIrDataValue_decimalList
  | OntologyIrDataValue_date
  | OntologyIrDataValue_dateList
  | OntologyIrDataValue_geohash
  | OntologyIrDataValue_geohashList
  | OntologyIrDataValue_geoshape
  | OntologyIrDataValue_geoshapeList
  | OntologyIrDataValue_timeSeriesReference
  | OntologyIrDataValue_timestamp
  | OntologyIrDataValue_timestampList
  | OntologyIrDataValue_null
  | OntologyIrDataValue_objectLocator
  | OntologyIrDataValue_objectLocatorList
  | OntologyIrDataValue_objectType
  | OntologyIrDataValue_attachment
  | OntologyIrDataValue_attachmentList
  | OntologyIrDataValue_marking
  | OntologyIrDataValue_markingList
  | OntologyIrDataValue_mediaReference
  | OntologyIrDataValue_mediaReferenceList
  | OntologyIrDataValue_geotimeSeriesReference
  | OntologyIrDataValue_geotimeSeriesReferenceList
  | OntologyIrDataValue_struct
  | OntologyIrDataValue_structList;

export interface OntologyIrInterfaceReferenceListType {
  interfaceTypeRid: _api_InterfaceTypeApiName;
}
export interface OntologyIrInterfaceReferenceType {
  interfaceTypeRid: _api_InterfaceTypeApiName;
}
export interface OntologyIrObjectLocator {
  objectTypeId: _api_ObjectTypeId;
  primaryKey: OntologyIrObjectPrimaryKey;
}
/**
 * A parameter value type that consists of a list of ObjectLocators.
 */
export interface OntologyIrObjectLocatorListValue {
  objectLocatorList: Array<OntologyIrObjectLocator>;
}
/**
 * A parameter value type that is an ObjectLocator.
 */
export type OntologyIrObjectLocatorValue = OntologyIrObjectLocator;
export type OntologyIrObjectPrimaryKey = Record<
  _api_ObjectTypeFieldApiName,
  PrimaryKeyValue
>;
export interface OntologyIrTimeDependentPropertyValue_seriesId {
  type: "seriesId";
  seriesId: _api_SeriesIdPropertyValue;
}

export interface OntologyIrTimeDependentPropertyValue_templateRid {
  type: "templateRid";
  templateRid: _api_TemplateRidPropertyValue;
}

export interface OntologyIrTimeDependentPropertyValue_qualifiedSeriesId {
  type: "qualifiedSeriesId";
  qualifiedSeriesId: _api_OntologyIrQualifiedSeriesIdPropertyValue;
}
/**
 * Identifies a time series in codex.
 * The qualifiedSeriesId variant should be used when there are multiple time series datasources backing this
 * property value (and therefore we need to specify which one to qualify with).
 */
export type OntologyIrTimeDependentPropertyValue =
  | OntologyIrTimeDependentPropertyValue_seriesId
  | OntologyIrTimeDependentPropertyValue_templateRid
  | OntologyIrTimeDependentPropertyValue_qualifiedSeriesId;

/**
 * A parameter type that consists of a TimeDependentPropertyValue.
 */
export interface OntologyIrTimeSeriesReferenceValue {
  timeSeriesReference: OntologyIrTimeDependentPropertyValue;
}
export interface ParameterDisabled {
}
export interface ParameterEditable {
}
export interface ParameterHidden {
}
export interface ParameterNotRequired {
}
export interface ParameterRenderHint_dropdown {
  type: "dropdown";
  dropdown: Dropdown;
}

export interface ParameterRenderHint_userDropdown {
  type: "userDropdown";
  userDropdown: UserDropdown;
}

export interface ParameterRenderHint_radio {
  type: "radio";
  radio: Radio;
}

export interface ParameterRenderHint_checkbox {
  type: "checkbox";
  checkbox: Checkbox;
}

export interface ParameterRenderHint_numericInput {
  type: "numericInput";
  numericInput: NumericInput;
}

export interface ParameterRenderHint_textInput {
  type: "textInput";
  textInput: TextInput;
}

export interface ParameterRenderHint_textArea {
  type: "textArea";
  textArea: TextArea;
}

export interface ParameterRenderHint_dateTimePicker {
  type: "dateTimePicker";
  dateTimePicker: DateTimePicker;
}

export interface ParameterRenderHint_filePicker {
  type: "filePicker";
  filePicker: FilePicker;
}

export interface ParameterRenderHint_resourcePicker {
  type: "resourcePicker";
  resourcePicker: ResourcePicker;
}

export interface ParameterRenderHint_cbacMarkingPicker {
  type: "cbacMarkingPicker";
  cbacMarkingPicker: CbacMarkingPicker;
}

export interface ParameterRenderHint_mandatoryMarkingPicker {
  type: "mandatoryMarkingPicker";
  mandatoryMarkingPicker: MandatoryMarkingPicker;
}
export type ParameterRenderHint =
  | ParameterRenderHint_dropdown
  | ParameterRenderHint_userDropdown
  | ParameterRenderHint_radio
  | ParameterRenderHint_checkbox
  | ParameterRenderHint_numericInput
  | ParameterRenderHint_textInput
  | ParameterRenderHint_textArea
  | ParameterRenderHint_dateTimePicker
  | ParameterRenderHint_filePicker
  | ParameterRenderHint_resourcePicker
  | ParameterRenderHint_cbacMarkingPicker
  | ParameterRenderHint_mandatoryMarkingPicker;

export interface ParameterRequired {
}
export interface ParameterRequiredConfiguration_required {
  type: "required";
  required: ParameterRequired;
}

export interface ParameterRequiredConfiguration_notRequired {
  type: "notRequired";
  notRequired: ParameterNotRequired;
}

export interface ParameterRequiredConfiguration_listLengthValidation {
  type: "listLengthValidation";
  listLengthValidation: ListLengthValidation;
}
/**
 * Specifies the number of values that are valid for a given parameter.
 */
export type ParameterRequiredConfiguration =
  | ParameterRequiredConfiguration_required
  | ParameterRequiredConfiguration_notRequired
  | ParameterRequiredConfiguration_listLengthValidation;

export interface ParameterVisibility_editable {
  type: "editable";
  editable: ParameterEditable;
}

export interface ParameterVisibility_disabled {
  type: "disabled";
  disabled: ParameterDisabled;
}

export interface ParameterVisibility_hidden {
  type: "hidden";
  hidden: ParameterHidden;
}
export type ParameterVisibility =
  | ParameterVisibility_editable
  | ParameterVisibility_disabled
  | ParameterVisibility_hidden;

export interface PrimaryKeyValue_boolean {
  type: "boolean";
  boolean: BooleanValue;
}

export interface PrimaryKeyValue_integer {
  type: "integer";
  integer: IntegerValue;
}

export interface PrimaryKeyValue_long {
  type: "long";
  long: LongValue;
}

export interface PrimaryKeyValue_double {
  type: "double";
  double: DoubleValue;
}

export interface PrimaryKeyValue_string {
  type: "string";
  string: StringValue;
}

export interface PrimaryKeyValue_date {
  type: "date";
  date: DateValue;
}

export interface PrimaryKeyValue_timestamp {
  type: "timestamp";
  timestamp: TimestampValue;
}
export type PrimaryKeyValue =
  | PrimaryKeyValue_boolean
  | PrimaryKeyValue_integer
  | PrimaryKeyValue_long
  | PrimaryKeyValue_double
  | PrimaryKeyValue_string
  | PrimaryKeyValue_date
  | PrimaryKeyValue_timestamp;

export interface Radio {
  layout?: MultipleChoiceItemLayoutOptions | null | undefined;
}
/**
 * Side of a relation.
 */
export type RelationSide = "SOURCE" | "TARGET" | "EITHER";
export interface ResourcePicker {
}
export interface SectionHidden {
}
export interface SectionVisibility_visible {
  type: "visible";
  visible: SectionVisible;
}

export interface SectionVisibility_hidden {
  type: "hidden";
  hidden: SectionHidden;
}
/**
 * Specifies if the section is visible or hidden
 */
export type SectionVisibility =
  | SectionVisibility_visible
  | SectionVisibility_hidden;

export interface SectionVisible {
}
export interface SpecifiedTimezone {
  timezone: string;
}
/**
 * StringListType specifies that this parameter must be a list of Strings.
 */
export interface StringListType {
}
/**
 * A parameter value type that consists of a list of Strings.
 */
export interface StringListValue {
  strings: Array<string>;
}
/**
 * StringType specifies that this parameter must be a String.
 */
export interface StringType {
}
/**
 * A parameter value type that is a String.
 */
export type StringValue = string;
export interface StructFieldBaseParameterType_boolean {
  type: "boolean";
  boolean: BooleanType;
}

export interface StructFieldBaseParameterType_integer {
  type: "integer";
  integer: IntegerType;
}

export interface StructFieldBaseParameterType_long {
  type: "long";
  long: LongType;
}

export interface StructFieldBaseParameterType_double {
  type: "double";
  double: DoubleType;
}

export interface StructFieldBaseParameterType_string {
  type: "string";
  string: StringType;
}

export interface StructFieldBaseParameterType_geohash {
  type: "geohash";
  geohash: GeohashType;
}

export interface StructFieldBaseParameterType_timestamp {
  type: "timestamp";
  timestamp: TimestampType;
}

export interface StructFieldBaseParameterType_date {
  type: "date";
  date: DateType;
}
/**
 * All of the possible types for fields of a Struct Parameter. This should be the intersection of allowed struct
 * property field types (https://www.palantir.com/docs/foundry/object-link-types/structs-overview/), and the
 * inhabitants of the BaseParameterType union.
 */
export type StructFieldBaseParameterType =
  | StructFieldBaseParameterType_boolean
  | StructFieldBaseParameterType_integer
  | StructFieldBaseParameterType_long
  | StructFieldBaseParameterType_double
  | StructFieldBaseParameterType_string
  | StructFieldBaseParameterType_geohash
  | StructFieldBaseParameterType_timestamp
  | StructFieldBaseParameterType_date;

export interface StructFieldDataValue_boolean {
  type: "boolean";
  boolean: BooleanValue;
}

export interface StructFieldDataValue_integer {
  type: "integer";
  integer: IntegerValue;
}

export interface StructFieldDataValue_long {
  type: "long";
  long: LongValue;
}

export interface StructFieldDataValue_double {
  type: "double";
  double: DoubleValue;
}

export interface StructFieldDataValue_string {
  type: "string";
  string: StringValue;
}

export interface StructFieldDataValue_date {
  type: "date";
  date: DateValue;
}

export interface StructFieldDataValue_geohash {
  type: "geohash";
  geohash: GeohashValue;
}

export interface StructFieldDataValue_timestamp {
  type: "timestamp";
  timestamp: TimestampValue;
}

export interface StructFieldDataValue_null {
  type: "null";
  null: NullValue;
}
/**
 * DataValue types that are allowed as struct parameter field. Each struct field in a struct parameter is mapped
 * mapped to a StructFieldDataValue. See StructFieldBaseParameterType for which types are supported for struct
 * parameter fields.
 */
export type StructFieldDataValue =
  | StructFieldDataValue_boolean
  | StructFieldDataValue_integer
  | StructFieldDataValue_long
  | StructFieldDataValue_double
  | StructFieldDataValue_string
  | StructFieldDataValue_date
  | StructFieldDataValue_geohash
  | StructFieldDataValue_timestamp
  | StructFieldDataValue_null;

/**
 * A string identifier used to map struct property fields to their respective constraints.
 * This identifier is intentionally generically typed. Constraints used on ontology types should interpret the
 * identifier as a struct field API name and pipeline builder should interpret the identifier as a dataset
 * struct column field name.
 */
export type StructFieldIdentifier = string;

/**
 * StructListType specifies that this parameter must be a list of Structs.
 */
export interface StructListType {
  structFieldTypes: Record<
    StructParameterFieldApiName,
    StructFieldBaseParameterType
  >;
}
/**
 * A parameter type that consists of a list of Structs.
 */
export interface StructListValue {
  structs: Array<StructValue>;
}
/**
 * A struct field of a struct parameter.
 */
export interface StructParameterField {
  structFieldApiName: StructParameterFieldApiName;
  structFieldDataValue: StructFieldDataValue;
}
/**
 * An API name that identifies a struct field in a struct parameter.
 */
export type StructParameterFieldApiName = string;

/**
 * StructType specifies that this parameter must be a Struct.
 */
export interface StructType {
  structFieldTypes: Record<
    StructParameterFieldApiName,
    StructFieldBaseParameterType
  >;
}
/**
 * A parameter type that consists of a Struct.
 */
export interface StructValue {
  structFields: Array<StructParameterField>;
}
export type TemporalUnit = "SECOND" | "MINUTE" | "HOUR" | "DAY" | "WEEK";
export interface TextArea {
}
export interface TextInput {
}
export interface TimeDependentPropertyValue_seriesId {
  type: "seriesId";
  seriesId: _api_SeriesIdPropertyValue;
}

export interface TimeDependentPropertyValue_templateRid {
  type: "templateRid";
  templateRid: _api_TemplateRidPropertyValue;
}

export interface TimeDependentPropertyValue_qualifiedSeriesId {
  type: "qualifiedSeriesId";
  qualifiedSeriesId: _api_QualifiedSeriesIdPropertyValue;
}
/**
 * Identifies a time series in codex.
 * The qualifiedSeriesId variant should be used when there are multiple time series datasources backing this
 * property value (and therefore we need to specify which one to qualify with).
 */
export type TimeDependentPropertyValue =
  | TimeDependentPropertyValue_seriesId
  | TimeDependentPropertyValue_templateRid
  | TimeDependentPropertyValue_qualifiedSeriesId;

export interface TimeFormat_timeFormat24Hour {
  type: "timeFormat24Hour";
  timeFormat24Hour: TimeFormat24Hour;
}

export interface TimeFormat_timeFormat12Hour {
  type: "timeFormat12Hour";
  timeFormat12Hour: TimeFormat12Hour;
}
export type TimeFormat =
  | TimeFormat_timeFormat24Hour
  | TimeFormat_timeFormat12Hour;

/**
 * Object representing that the time format should be in 12 hour format
 */
export interface TimeFormat12Hour {
}
/**
 * Object representing that the time format should be in 24 hour format
 */
export interface TimeFormat24Hour {
}
/**
 * TimeSeriesReferenceType specifies that this parameter must be a TimeSeriesReference.
 */
export interface TimeSeriesReferenceType {
}
/**
 * A parameter type that consists of a TimeDependentPropertyValue.
 */
export interface TimeSeriesReferenceValue {
  timeSeriesReference: TimeDependentPropertyValue;
}
/**
 * The timezone configuration of a timestamp value
 */
export interface TimestampConfiguration {
  canUserModifyTimezone: boolean;
  defaultTimezone: DefaultTimezone;
  timeFormat?: TimeFormat | null | undefined;
}
/**
 * TimestampListType specifies that this parameter must be a list of Timestamps.
 */
export interface TimestampListType {
  configuration?: TimestampConfiguration | null | undefined;
}
/**
 * A parameter value type that consists of a list of Timestamps.
 */
export interface TimestampListValue {
  timestamps: Array<string>;
}
/**
 * TimestampType specifies that this parameter must be a Timestamp.
 */
export interface TimestampType {
  configuration?: TimestampConfiguration | null | undefined;
}
/**
 * A parameter value type that is a Timestamp.
 */
export type TimestampValue = string;
export interface UserDropdown {
}
/**
 * UserInput is a type used to denote the user has opted for user-inputted PKs. Object creation will be handled within Actions Service.
 */
export interface UserInput {
}
