{
  "$schema": "https://turbo.build/schema.json",
  "ui": "stream",
  "tasks": {
    "codegen": {
      "outputLogs": "new-only"
    }, // empty for overriding
    "fix-lint": {
      "cache": false
    },

    "ci:cspell": {
      "dependsOn": ["//#cspell:all"]
    },

    "//#cspell:all": {
      "cache": false
    },

    "lint": {
      "outputLogs": "new-only",
      "inputs": [
        "src/**/*.ts",
        "src/**/*.tsx",
        ".eslintrc.cjs",
        "eslint.config.mjs",
        "tsconfig.json"
      ],
      "outputs": [],
      "dependsOn": ["//#global-eslint-config", "//#dprint", "typecheck"]
    },

    /* Psuedo task to let us depend on dprint config */
    "//#dprint": {
      "outputLogs": "new-only",
      "inputs": ["dprint.json"]
    },

    "check-attw": {
      "outputLogs": "new-only",
      "dependsOn": ["transpile", "typecheck"],
      "inputs": ["build/{esm,cjs,browser,types}", "package.json", "*.d.ts"]
    },

    "check-spelling": {
      "outputLogs": "new-only",
      "inputs": ["**/*.{ts,tsx,cts,mts,md,json,js,mjs,cjs}"]
    },

    /* Psuedo task to depend on the script contents */
    "//#babel-config": {
      "inputs": ["babel.config.mjs"]
    },

    "//#global-eslint-config": {
      "inputs": ["eslint.config.mjs"]
    },

    "clean": {
      "cache": false
    },

    "@osdk/e2e.generated.1.1.x#typecheck": {
      "outputLogs": "new-only",
      "inputs": [
        "bin/**",
        "src/**",
        "src/**/*.{mts,cts,ts,tsx}",
        "tsconfig.json",
        "typecheck.sh",
        "tsconfig.cjs.json",
        "*.d.ts"
      ],
      "outputs": [
        "build/{esm,cjs,browser}/**/*.{ts,cjs,ts.map,cts.map}"
      ],
      "dependsOn": [
        "@osdk/monorepo.tsconfig#typecheck",
        "^typecheck",
        "^transpile",
        "codegen"
      ]
    },

    "typecheck": {
      "dependsOn": [
        "codegen",
        "^transpileTypes"
      ]
    },

    "@osdk/tests.verify-fallback-package-v2#typecheck": {
      "dependsOn": ["^transpileCjs"]
    },

    "@osdk/monorepo.tsup#typecheck": {
      "outputLogs": "new-only",
      "inputs": ["tsup.mjs"]
    },

    "check-api": {
      "outputLogs": "new-only",
      "inputs": ["api-extractor.json", "build/esm/**/*", "api-extractor.json"],
      "outputs": ["etc/*.report.api.md", "build/api-extractor/**/*"],
      "dependsOn": ["transpileTypes", "@osdk/monorepo.api-extractor#check-api"]
    },

    // Doesn't do anything, just a virtual task to depend on the base.json file
    "@osdk/monorepo.api-extractor#check-api": {
      "inputs": ["base.json"]
    },

    "api-docs": {
      "outputLogs": "new-only",
      "inputs": ["temp/**/*"],
      "outputs": ["api-docs/**/*"],
      "dependsOn": ["check-api"]
    },

    "postVersioning": {
    },

    "@osdk/version-updater#postVersioning": {
      "inputs": [
        "scripts/postVersioning.mjs",
        "../client/package.json",
        "../client/src/Client.ts",
        "../generator/src/v2.0/generateMetadata.ts"
      ],
      "outputs": ["../client/src/Client.ts", "../generator/src/v2.0/generateMetadata.ts"]
    },

    "@osdk/monorepo.tsconfig#typecheck": {
      "outputLogs": "new-only",
      "inputs": ["tsconfig.base.json"]
    },

    "build": {
      "dependsOn": ["transpile", "typecheck"],
      "inputs": [
        "src/**/*",

        // default input files for vite
        "index.html",
        "vite.config.ts",
        "postcss.config.js",
        "tailwind.config.js",

        // we use this internally to prevent issues with the google fonts request
        // nextjs makes out of the box
        "../../google-font-mocked-response.js"
      ],
      "outputs": [
        // default output dir for vite
        "dist/**",

        // default output dir for nextjs
        "out/**",

        // internally chosen output dir for sanity
        "build/site/**"
      ]
    },

    "bundle": {
      "dependsOn": ["bundle:esbuild"]
    },

    "bundle:esbuild": {
      "outputs": ["build/esbuild/**"],
      "dependsOn": ["transpile", "typecheck"]
    },

    "benchmark": {
      "dependsOn": ["bundle"]
    },

    "@osdk/e2e.sandbox.todoapp#build": {
      "inputs": ["src/**/*", "vite.config.ts", "postcss.config.js", "tailwind.config.js"],
      "dependsOn": ["transpile", "typecheck"]
    },

    "@osdk/examples.next-static-export#build": {
      "dependsOn": ["transpile", "typecheck"],
      "inputs": ["../../google-font-mocked-response.js"]
    },

    "transpile": {
      "outputLogs": "new-only",
      "dependsOn": [
        "@osdk/monorepo.tsconfig#typecheck",
        "^typecheck",
        "^transpile",
        "codegen",
        "transpileCjs",
        "transpileEsm",
        "transpileBrowser"
      ],
      "inputs": ["bin/**"]
    },

    "transpileTypes": {
      "outputLogs": "new-only",
      "dependsOn": [
        "@osdk/monorepo.tsconfig#typecheck",
        "codegen"
      ],
      "inputs": [
        "bin/**",
        "src/**",
        "templates/**",
        "tsconfig.json"
      ],
      "outputs": [
        "build/types/**"
      ]
    },

    "transpileEsm": {
      "outputLogs": "new-only",
      "dependsOn": [
        "//#babel-config",
        "@osdk/monorepo.tsconfig#typecheck",

        // Because some of these tasks bundle other projects we need to
        // prepare their dependencies first. In the future we can decouple
        // transpile from bundling which should allow us to remove this
        // for everyone but the bundled packages
        "^transpileEsm",
        "codegen"
      ],
      "inputs": [
        "bin/**",
        "src/**",
        "templates/**",
        "tsup.config.js",
        "tsconfig.json"
      ],
      "outputs": [
        "build/esm/**"
      ]
    },

    "transpileBrowser": {
      "outputLogs": "new-only",
      "dependsOn": [
        "//#babel-config",
        "@osdk/monorepo.tsconfig#typecheck",
        "^transpileBrowser",
        "codegen"
      ],
      "inputs": [
        "bin/**",
        "src/**",
        "templates/**",
        "tsconfig.json"
      ],
      "outputs": [
        "build/browser/**"
      ]
    },

    // This one both transpiles to CJS and it creates the .d.ts files
    // to let cjs work. As a result, we need to rely on our dependency's
    // transpileCjs tasks too.
    "transpileCjs": {
      "outputLogs": "new-only",
      "dependsOn": [
        "//#babel-config",
        "@osdk/monorepo.tsconfig#typecheck",
        "^transpileCjs",

        // tsup may be trying to resolve the module types and not the cjs types
        "^transpileTypes",
        "codegen"
      ],
      "inputs": [
        "bin/**",
        "src/**",
        "templates/**",
        "tsup.config.js",
        "tsconfig.json"
      ],
      "outputs": [
        "build/cjs/**"
      ]
    },

    "test": {
      "outputLogs": "new-only",
      "env": ["FORCE_COLOR"],
      "dependsOn": ["^transpile"]
    },

    "//#check-mrl": {
      "inputs": [
        "package.json",
        ".monorepolint.config.mjs",
        "packages/*/package.json",
        "packages/*/tsconfig.json",
        "packages/*/src/public/*",
        "examples/*/*/package.json",
        "examples/*/*/tsconfig.json",
        "examples-extra/*/*/package.json",
        "examples-extra/*/*/tsconfig.json",
        "templates/*"
      ]
    },

    "check": {
      "dependsOn": [
        "//#check-mrl",
        "lint",
        "transpile",
        "typecheck",
        "test",
        "check-attw",
        "check-api",
        "check-spelling"
      ]
    }
  },

  "globalDependencies": ["config/tsconfig.base.json"]
}
